// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/internal.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	shortener "github.com/romanp1989/go-shortener/internal/grpc/proto/shortener"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Internal_Encode_FullMethodName     = "/proto.Internal/Encode"
	Internal_Decode_FullMethodName     = "/proto.Internal/Decode"
	Internal_Shorten_FullMethodName    = "/proto.Internal/Shorten"
	Internal_SaveBatch_FullMethodName  = "/proto.Internal/SaveBatch"
	Internal_GetUserURL_FullMethodName = "/proto.Internal/GetUserURL"
	Internal_DeleteURLs_FullMethodName = "/proto.Internal/DeleteURLs"
	Internal_GetStats_FullMethodName   = "/proto.Internal/GetStats"
	Internal_PingDB_FullMethodName     = "/proto.Internal/PingDB"
)

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalClient interface {
	Encode(ctx context.Context, in *shortener.RequestEncode, opts ...grpc.CallOption) (*shortener.ResponseEncode, error)
	Decode(ctx context.Context, in *shortener.RequestDecode, opts ...grpc.CallOption) (*shortener.ResponseDecode, error)
	Shorten(ctx context.Context, in *shortener.RequestShorten, opts ...grpc.CallOption) (*shortener.ResponseShorten, error)
	SaveBatch(ctx context.Context, in *shortener.RequestSaveBatch, opts ...grpc.CallOption) (*shortener.ResponseSaveBatch, error)
	GetUserURL(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shortener.ResponseGetUserURL, error)
	DeleteURLs(ctx context.Context, in *shortener.RequestDeleteURLs, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shortener.ResponseGetStats, error)
	PingDB(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type internalClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalClient(cc grpc.ClientConnInterface) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) Encode(ctx context.Context, in *shortener.RequestEncode, opts ...grpc.CallOption) (*shortener.ResponseEncode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shortener.ResponseEncode)
	err := c.cc.Invoke(ctx, Internal_Encode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) Decode(ctx context.Context, in *shortener.RequestDecode, opts ...grpc.CallOption) (*shortener.ResponseDecode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shortener.ResponseDecode)
	err := c.cc.Invoke(ctx, Internal_Decode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) Shorten(ctx context.Context, in *shortener.RequestShorten, opts ...grpc.CallOption) (*shortener.ResponseShorten, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shortener.ResponseShorten)
	err := c.cc.Invoke(ctx, Internal_Shorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SaveBatch(ctx context.Context, in *shortener.RequestSaveBatch, opts ...grpc.CallOption) (*shortener.ResponseSaveBatch, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shortener.ResponseSaveBatch)
	err := c.cc.Invoke(ctx, Internal_SaveBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetUserURL(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shortener.ResponseGetUserURL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shortener.ResponseGetUserURL)
	err := c.cc.Invoke(ctx, Internal_GetUserURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) DeleteURLs(ctx context.Context, in *shortener.RequestDeleteURLs, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Internal_DeleteURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*shortener.ResponseGetStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shortener.ResponseGetStats)
	err := c.cc.Invoke(ctx, Internal_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) PingDB(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Internal_PingDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServer is the server API for Internal service.
// All implementations must embed UnimplementedInternalServer
// for forward compatibility.
type InternalServer interface {
	Encode(context.Context, *shortener.RequestEncode) (*shortener.ResponseEncode, error)
	Decode(context.Context, *shortener.RequestDecode) (*shortener.ResponseDecode, error)
	Shorten(context.Context, *shortener.RequestShorten) (*shortener.ResponseShorten, error)
	SaveBatch(context.Context, *shortener.RequestSaveBatch) (*shortener.ResponseSaveBatch, error)
	GetUserURL(context.Context, *empty.Empty) (*shortener.ResponseGetUserURL, error)
	DeleteURLs(context.Context, *shortener.RequestDeleteURLs) (*empty.Empty, error)
	GetStats(context.Context, *empty.Empty) (*shortener.ResponseGetStats, error)
	PingDB(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedInternalServer()
}

// UnimplementedInternalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalServer struct{}

func (UnimplementedInternalServer) Encode(context.Context, *shortener.RequestEncode) (*shortener.ResponseEncode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedInternalServer) Decode(context.Context, *shortener.RequestDecode) (*shortener.ResponseDecode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedInternalServer) Shorten(context.Context, *shortener.RequestShorten) (*shortener.ResponseShorten, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedInternalServer) SaveBatch(context.Context, *shortener.RequestSaveBatch) (*shortener.ResponseSaveBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBatch not implemented")
}
func (UnimplementedInternalServer) GetUserURL(context.Context, *empty.Empty) (*shortener.ResponseGetUserURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURL not implemented")
}
func (UnimplementedInternalServer) DeleteURLs(context.Context, *shortener.RequestDeleteURLs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedInternalServer) GetStats(context.Context, *empty.Empty) (*shortener.ResponseGetStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedInternalServer) PingDB(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDB not implemented")
}
func (UnimplementedInternalServer) mustEmbedUnimplementedInternalServer() {}
func (UnimplementedInternalServer) testEmbeddedByValue()                  {}

// UnsafeInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServer will
// result in compilation errors.
type UnsafeInternalServer interface {
	mustEmbedUnimplementedInternalServer()
}

func RegisterInternalServer(s grpc.ServiceRegistrar, srv InternalServer) {
	// If the following call pancis, it indicates UnimplementedInternalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Internal_ServiceDesc, srv)
}

func _Internal_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shortener.RequestEncode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_Encode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).Encode(ctx, req.(*shortener.RequestEncode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shortener.RequestDecode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).Decode(ctx, req.(*shortener.RequestDecode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shortener.RequestShorten)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).Shorten(ctx, req.(*shortener.RequestShorten))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SaveBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shortener.RequestSaveBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SaveBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_SaveBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SaveBatch(ctx, req.(*shortener.RequestSaveBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetUserURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetUserURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_GetUserURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetUserURL(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_DeleteURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shortener.RequestDeleteURLs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).DeleteURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_DeleteURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).DeleteURLs(ctx, req.(*shortener.RequestDeleteURLs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_PingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).PingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Internal_PingDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).PingDB(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Internal_ServiceDesc is the grpc.ServiceDesc for Internal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Internal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _Internal_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _Internal_Decode_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _Internal_Shorten_Handler,
		},
		{
			MethodName: "SaveBatch",
			Handler:    _Internal_SaveBatch_Handler,
		},
		{
			MethodName: "GetUserURL",
			Handler:    _Internal_GetUserURL_Handler,
		},
		{
			MethodName: "DeleteURLs",
			Handler:    _Internal_DeleteURLs_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Internal_GetStats_Handler,
		},
		{
			MethodName: "PingDB",
			Handler:    _Internal_PingDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/internal.proto",
}
